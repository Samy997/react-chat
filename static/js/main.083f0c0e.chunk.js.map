{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","test","uid","add","text","createdAt","FieldValue","serverTimestamp","photoURL","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","type","value","onChange","target","props","messageClass","src","alt","App","useAuthState","user","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8TAUAA,IAASC,cAAc,CACtBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGhB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAoB3B,SAASC,IAMR,OACC,4BAAQC,UAAU,UAAUC,QANJ,WACxB,IAAMC,EAAW,IAAIf,IAASU,KAAKM,mBACnCN,EAAKO,gBAAgBF,KAIrB,uBAMF,SAASG,IACR,OACCR,EAAKS,aAAe,4BAAQL,QAAS,kBAAMJ,EAAKU,YAA5B,YAItB,SAASC,IACR,IAAMC,EAAQC,mBAERC,EAAcb,EAAUc,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAJlC,EAMAC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EANY,sBAQeC,mBAAS,IARxB,mBAQZC,EARY,KAQDC,EARC,KAUbC,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACnBD,EAAEE,iBAEG,KAAKC,KAAKN,GAHI,wDAOXO,EAAQ9B,EAAKS,YAAbqB,IAEP,gIATkB,SAUbhB,EAAYiB,IAAI,CACrBC,KAAMT,EACNU,UAAW3C,IAASW,UAAUiC,WAAWC,kBACzCL,MACAM,SALA,kIATkB,OAiBnBZ,EAAa,IAEbZ,EAAMyB,QAAQC,eAAe,CAAEC,SAAU,WAnBtB,2CAAH,sDAsBjB,OACC,oCACC,8BACElB,GACAA,EAASmB,KAAI,SAACC,GAAD,OAAS,kBAACC,EAAD,CAAaC,IAAKF,EAAIG,GAAIC,QAASJ,OAE1D,yBAAKK,IAAKlC,KAGX,0BAAMmC,SAAUtB,GACf,2BACCuB,KAAK,OACLC,MAAO1B,EACP2B,SAAU,SAACxB,GAAD,OAAOF,EAAaE,EAAEyB,OAAOF,UAGxC,4BAAQD,KAAK,UAAb,kBAMJ,SAASN,EAAYU,GAAQ,IAAD,EACKA,EAAMP,QAA9Bb,EADmB,EACnBA,KAAMF,EADa,EACbA,IAAKM,EADQ,EACRA,SAEbiB,EAAevB,IAAQ9B,EAAKS,YAAYqB,IAAM,OAAS,WAE7D,OACC,yBAAK3B,UAAS,kBAAakD,IAC1B,yBAAKC,IAAKlB,EAAUmB,IAAI,SACxB,2BAAIvB,IAKQwB,MAxGf,WAAgB,IAAD,EACCC,YAAazD,GAArB0D,EADO,oBAEd,OACC,yBAAKvD,UAAU,OACd,4BAAQA,UAAU,cACjB,4BACC,0BAAMwD,KAAK,MAAMC,kBAAgB,SAAjC,yCAID,kBAACpD,EAAD,OAGD,iCAAUkD,EAAO,kBAAC/C,EAAD,MAAe,kBAACT,EAAD,SCzBf2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,c","file":"static/js/main.083f0c0e.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n\tapiKey: 'AIzaSyAagg4avuQqwnUp96UIXfmEAF0IEoPihVE',\n\tauthDomain: 'reactchat-3830f.firebaseapp.com',\n\tdatabaseURL: 'https://reactchat-3830f.firebaseio.com',\n\tprojectId: 'reactchat-3830f',\n\tstorageBucket: 'reactchat-3830f.appspot.com',\n\tmessagingSenderId: '904343075696',\n\tappId: '1:904343075696:web:17a812a45d2a3206f3adb5',\n\tmeasurementId: 'G-52SEV57Q1Z'\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\tconst [user] = useAuthState(auth);\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='App-header'>\n\t\t\t\t<h1>\n\t\t\t\t\t<span role='img' aria-labelledby='icons'>\n\t\t\t\t\t\t‚öõÔ∏èüî•üí¨\n\t\t\t\t\t</span>\n\t\t\t\t</h1>\n\t\t\t\t<SignOut />\n\t\t\t</header>\n\n\t\t\t<section>{user ? <ChatRoom /> : <SignIn />}</section>\n\t\t</div>\n\t);\n}\n\nfunction SignIn() {\n\tconst signInWithGoogle = () => {\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\n\t\tauth.signInWithPopup(provider);\n\t};\n\n\treturn (\n\t\t<button className='sign-in' onClick={signInWithGoogle}>\n\t\t\tSign in with Google\n\t\t</button>\n\t);\n}\n\nfunction SignOut() {\n\treturn (\n\t\tauth.currentUser && <button onClick={() => auth.signOut()}>Sign Out</button>\n\t);\n}\n\nfunction ChatRoom() {\n\tconst dummy = useRef();\n\n\tconst messagesRef = firestore.collection('messages');\n\tconst query = messagesRef.orderBy('createdAt').limit(25);\n\n\tconst [messages] = useCollectionData(query, { idField: 'id' });\n\n\tconst [formValue, setFormValue] = useState('');\n\n\tconst sendMessage = async (e) => {\n\t\te.preventDefault();\n\n\t\tif (!/\\S/.test(formValue)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { uid } = auth.currentUser;\n\t\tconst photoURL =\n\t\t\t'https://media.istockphoto.com/vectors/businessman-avatar-male-face-icon-in-flat-design-man-avatar-profile-vector-id1173599793';\n\t\tawait messagesRef.add({\n\t\t\ttext: formValue,\n\t\t\tcreatedAt: firebase.firestore.FieldValue.serverTimestamp(),\n\t\t\tuid,\n\t\t\tphotoURL\n\t\t});\n\n\t\tsetFormValue('');\n\n\t\tdummy.current.scrollIntoView({ behavior: 'smooth' });\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<main>\n\t\t\t\t{messages &&\n\t\t\t\t\tmessages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n\t\t\t\t<div ref={dummy}></div>\n\t\t\t</main>\n\n\t\t\t<form onSubmit={sendMessage}>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={formValue}\n\t\t\t\t\tonChange={(e) => setFormValue(e.target.value)}\n\t\t\t\t/>\n\n\t\t\t\t<button type='submit'>üïä</button>\n\t\t\t</form>\n\t\t</>\n\t);\n}\n\nfunction ChatMessage(props) {\n\tconst { text, uid, photoURL } = props.message;\n\n\tconst messageClass = uid === auth.currentUser.uid ? 'sent' : 'recieved';\n\n\treturn (\n\t\t<div className={`message ${messageClass}`}>\n\t\t\t<img src={photoURL} alt='User' />\n\t\t\t<p>{text}</p>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}